##*(x1/xlen)*(y1/ylen)
kern.est <- kde2d.est
kde2d.est2 <- kde2d(x,y,h = 150, n=xlen,lims=c(xrange,yrange))  ##returns kernel density estimates
kde2d.est2$z <- kde2d.est2$z*n  ##change to kernel function estimates
kern.est2 <- kde2d.est2
muf <- function(x,y){  ##might get in trouble if point is near the boundary
a=xlen*(x-xrange[1])/(xrange[2]-xrange[1])
b=ylen*(y-yrange[1])/(yrange[2]-yrange[1])
d=kern.est$z[ceiling(a),ceiling(b)]
return(d)
}
muf2 <- function(x,y){  ##might get in trouble if point is near the boundary
a=xlen*(x-xrange[1])/(xrange[2]-xrange[1])
b=ylen*(y-yrange[1])/(yrange[2]-yrange[1])
d=kern.est2$z[ceiling(a),ceiling(b)]
return(d)
}
cif <- function(X, theta){
x <- X$x; y <- X$y; time <- X$t
a = theta[1]; b = theta[2]; p = theta[3]
t = time; t1 = max(time) - min(time)
n = length(x)
lam1 = rep((1-p)*muf(x[1],y[1])/t1,n)
for(i in 2:n){
r2 = (x[i]-x[1:(i-1)])^2+(y[i]-y[1:(i-1)])^2 # not using Great Circle Distance
lam1[i] = (1-p)*muf(x[i],y[i])/t1 + p*sum((a*b/pi)*exp(-a*(t[i]-t[1:(i-1)])-b*r2))
}
lam1
}
cif2 <- function(X, theta){
x <- X$x; y <- X$y; time <- X$t
a = theta[1]; b = theta[2]; p = theta[3]
t = time; t1 = max(time) - min(time)
n = length(x)
lam1 = rep((1-p)*muf2(x[1],y[1])/t1,n)
for(i in 2:n){
r2 = (x[i]-x[1:(i-1)])^2+(y[i]-y[1:(i-1)])^2 # not using Great Circle Distance
lam1[i] = (1-p)*muf2(x[i],y[i])/t1 + p*sum((a*b/pi)*exp(-a*(t[i]-t[1:(i-1)])-b*r2))
}
lam1
}
cif1.1 <- function(X, theta){
x <- X$x; y <- X$y; time <- X$t
a = theta[1]; b = theta[2]; p = theta[3]
t = time; t1 = max(time) - min(time)
n = length(x)
r2 = (x[n]-x[1:(n-1)])^2+(y[n]-y[1:(n-1)])^2 # not using Great Circle Distance
lam1 = (1-p)*muf(x[n],y[n])/t1 + p*sum((a*b/pi)*exp(-a*(t[n]-t[1:(n-1)])-b*r2))
lam1
}
cif2.1 <- function(X, theta){
x <- X$x; y <- X$y; time <- X$t
a = theta[1]; b = theta[2]; p = theta[3]
t = time; t1 = max(time) - min(time)
n = length(x)
r2 = (x[n]-x[1:(n-1)])^2+(y[n]-y[1:(n-1)])^2 # not using Great Circle Distance
lam1 = (1-p)*muf2(x[n],y[n])/t1 + p*sum((a*b/pi)*exp(-a*(t[n]-t[1:(n-1)])-b*r2))
lam1
}
source(file="source files.R")
theta1 <- c(0.07604419, 0.02924009, 0.57702962)
theta2 <- c(0.08249388, 0.03484067, 0.52750189)
X <- stpp(x, y, t, stw = stwin(xrange, yrange, c(0,max(t))))
plot(X)
plot(X, pch=".")
grid <- c(20,20)
k <- 900/(diff(xrange)*diff(yrange)*max(t))
lambda1 <- cif(X, theta1)
lambda2 <- cif2(X, theta2)
tr <- thinresid(X, cif, theta = theta1)
plot(tr)
str <- superthin(X, cif, theta=theta1, k=k)
str2 <- superthin(X, cif2, theta=theta2, k=k)
plot(str)
plot(str2)
str <- superthin(X, cif1.1, theta1, k=k, lambda1)
plot(str)
gr1.1 <- gridresid(X, cif, theta=theta1, grid=grid, resid = "inverse")
gr1.2 <- gridresid(X, cif2, theta=theta2, grid=grid, resid = "inverse")
plot(gr1.1)
plot(gr1.2)
plot(gr1.2, plot.smooth=T)
plot(gr1.2, plot.smooth=T, contours=T)
dev.new()
dev.off()
plot(gr1.2, plot.smooth=T, contours=T)
ck <- cm.colors(100)
ends <- min(abs(min(gr1.1$residuals)), max(gr1.1$residuals))
cuts <- seq(-ends-.001, ends+.001, length.out = 101)
temp <- gr1.1$residuals
temp[which(temp < -ends)] <- -ends
temp[which(temp > ends)] <- ends
gr1.1$residuals <- temp
plot(gr1.1, col.key = ck, cutoffs = cuts, pch = ".")
tsr1 <- tessresid(X, cif, theta=theta1, algthm="miser", n.miser = "1000000")
tsr1 <- tessresid(X, cif, theta=theta1, algthm="miser", n.miser = 1000000)
load(simdata)
X <- stpp(simdata$x, simdata$y, simdata$t)
load(/Data/simdata)
setwd("~/work/stppResid R package/stppResid/data")
load(simdata)
load("/home/robert/work/stppResid R package/stppResid/data/simdata.rda")
X <- stpp(simdata$x, simdata$y, simdata$t)
ci1 <- function(X, theta){theta*exp(-2*X$x - 2*X$y - 2*X$t)} #correct model
ci2 <- function(X, theta = NULL){rep(250, length(X$x))} #homogeneous Poisson model
deviance <- devresid(X, ci1, ci2, theta1 = 3000)
plot(deviance)
names(deviance)
ci1 <- function(X, theta){theta*exp(-2*X$x - 2*X$y - 2*X$t)} #correct model
ci2 <- function(X, theta = NULL){rep(250, length(X$x))} #homogeneous Poisson model
deviance <- devresid(X, ci1, ci2, theta1 = 3000, n1.miser=20000, n2.miser=20000)
ci1 <- function(X, theta){theta*exp(-2*X$x - 2*X$y - 2*X$t)} #correct model
ci2 <- function(X, theta = NULL){rep(250, length(X$x))} #homogeneous Poisson model
deviance <- devresid(X, ci1, ci2, theta1 = 3000, n1.miser=20000, n2.miser=25000)
gresiduals <- gridresid(X, ci1, theta = 3000)
names(gresiduals)
plot(gresiduals)
plot(gresiduals, plot.smooth=T)
head(gresiduals$app.pts)
nrow(gresiduals$app.pts)
plot(gresiduals$app.pts$x, gresiduals$app.pts$y, pch=".")
dev.off()
ci1 <- function(X, theta){theta*exp(-2*X$x - 2*X$y - 2*X$t)} #correct model
ci2 <- function(X, theta = NULL){rep(250, length(X$x))} #homogeneous Poisson model
deviance <- devresid(X, ci1, ci2, theta1 = 3000, n1.miser=20000, n2.miser=35000)
ci1 <- function(X, theta){theta*exp(-2*X$x - 2*X$y - 2*X$t)} #correct model
ci2 <- function(X, theta = NULL){rep(250, length(X$x))} #homogeneous Poisson model
deviance <- devresid(X, ci1, ci2, theta1 = 3000, n1.miser=20000, n2.miser=50000)
ci1 <- function(X, theta){theta*exp(-2*X$x - 2*X$y - 2*X$t)} #correct model
ci2 <- function(X, theta = NULL){rep(250, length(X$x))} #homogeneous Poisson model
deviance <- devresid(X, ci1, ci2, theta1 = 3000, n1.miser=20000, n2.miser=500000)
cifunction <- ci2
plot(X)
cifunction1 <- ci1
cifunction2 <- ci2
theta2
theta1
if(!is.stpp(X))
stop("X must be an object of type stpp")
if(!is.null(lambda1)) {
if(length(lambda1) != length(X$x))
stop("lambda1 must be same length as number of points")
lamb1 <- lambda1
} else {
if(is.null(theta1)) {
lamb1 <- cifunction1(X)
} else
lamb1 <- cifunction1(X, theta1)
}
if(!is.null(lambda2)) {
if(length(lambda2) != length(X$x))
stop("lambda2 must be same length as number of points")
lamb2 <- lambda2
} else {
if(is.null(theta2)) {
lamb2 <- cifunction2(X)
} else
lamb2 <- cifunction2(X, theta2)
}
if(is.null(gf)) {
gf <- make.grid(stwin(X$xcoord, X$ycoord, X$tcoord), grid)
} else
if(!is.stgrid(gf))
stop("gf must be an object of type stgrid")
if(missing(algthm1))
algthm1 = "miser"
if(missing(algthm2))
algthm2 = "miser"
if(!is.null(ints1))
algthm1 = "none"
if(!is.null(ints2))
algthm2 = "none"
if((algthm1 == "none") & (is.null(ints1)))
algthm1 = "miser"
if((algthm2 == "none") & (is.null(ints2)))
algthm2 = "miser"
countf.s <- function(xy)
{
which((gf[[1]]$xmin <= xy[1]) & (gf[[1]]$xmax > xy[1]) & (gf[[1]]$ymin <= xy[2]) & (gf[[1]]$ymax > xy[2]))
}
count1 <- rep(0, nrow(gf$grid.full))
count2 <- rep(0, nrow(gf$grid.full))
place <- apply(cbind(X$x, X$y), 1, countf.s)
gf <- make.grid(stwin(X$xcoord, X$ycoord, X$tcoord), grid)
countf.s <- function(xy)
{
which((gf[[1]]$xmin <= xy[1]) & (gf[[1]]$xmax > xy[1]) & (gf[[1]]$ymin <= xy[2]) & (gf[[1]]$ymax > xy[2]))
}
count1 <- rep(0, nrow(gf$grid.full))
count2 <- rep(0, nrow(gf$grid.full))
place <- apply(cbind(X$x, X$y), 1, countf.s)
sums <- aggregate(cbind(place, log(lamb1), log(lamb2)), by = list(place), sum)
lamb1 <- cifunction1(X, theta1)
cifunction(X, theta1)
theta1
cifunction1
cifunction1(X, theta1)
length(X$x)
length(X$y)
length(X$t)
theta1=3000
lamb1 <- cifunction1(X, theta1)
theta2=100
lamb2 <- cifunction2(X, theta2)
cifunction2
sums <- aggregate(cbind(place, log(lamb1), log(lamb2)), by = list(place), sum)
count1[sums[,1]] <- sums[,3]
count2[sums[,1]] <- sums[,4]
gf
n <- 10000
theta <- NULL
if(is.null(theta)) {
fun2 <- function(z)
{
Y <- rbind(data, z)
Y <- Y[which(Y$t <= z[3]),]
Y <- stpp(Y$x, Y$y, Y$t, stwin(X$xcoord, X$ycoord, X$tcoord))
tail(cifunction(Y),1)
}
}
if(!is.null(theta)) {
fun2 <- function(z)
{
Y <- rbind(data, z)
Y <- Y[which(Y$t <= z[3]),]
Y <- stpp(Y$x, Y$y, Y$t, stwin(X$xcoord, X$ycoord, X$tcoord))
tail(cifunction(Y, theta),1)
}
}
int.fun <- function(g)
{
bin.pts <- app.pts[which((app.pts$x >= g[1]) & (app.pts$x < g[2]) & (app.pts$y >= g[3]) & (app.pts$y < g[4])) , 4]
int.bin <- mean(bin.pts)*vol
c(int.bin, mean(bin.pts), sd(bin.pts))
}
vol <- diff(X$xcoord) * diff(X$ycoord) * diff(X$tcoord) / nrow(gf$grid.full)
data <- data.frame(cbind(X$x, X$y, X$t))
names(data) <- c("x", "y", "t")
xrange <- X$xcoord
yrange <- X$ycoord
trange <- X$tcoord
n.start <- n*.1
x1 <- runif(n.start, xrange[1], xrange[2])
y1 <- runif(n.start, yrange[1], yrange[2])
t1 <- runif(n.start, trange[1], trange[2])
N <- n - n.start
N
n.start
xrange
yrange
trange
N
all.pts <- data.frame(cbind(x1, y1, t1))
names(all.pts) <- c("x", "y", "t")
all.l <- apply(all.pts, 1, fun2)
lX1 <- all.l[which((all.pts[,1] > xrange[1]) & (all.pts[,1] <= median(xrange)))]
lX2 <- all.l[which((all.pts[,1] > median(xrange)) & (all.pts[,1] < xrange[2]))]
lY1 <- all.l[which((all.pts[,2] > yrange[1]) & (all.pts[,2] <= median(yrange)))]
lY2 <- all.l[which((all.pts[,2] > median(yrange)) & (all.pts[,2] < yrange[2]))]
if((length(lX1) > 1) & (length(lX2) > 1)) {
sX1 <- sd(lX1)
sX2 <- sd(lX2)
sXsum <- sX1 + sX2
} else sXsum <- Inf
if((length(lY1) > 1) & (length(lY2) > 1)) {
sY1 <- sd(lY1)
sY2 <- sd(lY2)
sYsum <- sY1 + sY2
} else sYsum <- Inf
S <- c(sXsum, sYsum)
all.pts <- cbind(all.pts, all.l)
names(all.pts) <- c("x", "y", "t", "l")
if(((S[1] == Inf) & (S[2] == Inf))) {
x1.1 <- runif(N, xrange[1], xrange[2])
y1.1 <- runif(N, yrange[1], yrange[2])
t1.1 <- runif(N, trange[1], trange[2])
all.pts.1 <- data.frame(cbind(x1.1, y1.1, t1.1))
names(all.pts.1) <- c("x", "y", "t")
l <- apply(all.pts.1, 1, fun2)
all.pts.1 <- cbind(all.pts.1, l)
all.pts <- rbind(all.pts, all.pts.1)
return(all.pts)
}
S
sX1
sX2
lX1
lX2
sY1
sY2
sYsum
N
ci1 <- function(X, theta){theta*exp(-2*X$x - 2*X$y - 2*X$t)} #correct model
ci2 <- function(X, theta = NULL){rep(250, length(X$x))} #homogeneous Poisson model
deviance <- devresid(X, ci1, ci2, theta1 = 3000)
devbin.info.MISER <- function(X, cifunction, theta = NULL, gf, n)
{
if(is.null(theta)) {
fun2 <- function(z)
{
Y <- rbind(data, z)
Y <- Y[which(Y$t <= z[3]),]
Y <- stpp(Y$x, Y$y, Y$t, stwin(X$xcoord, X$ycoord, X$tcoord))
tail(cifunction(Y),1)
}
}
if(!is.null(theta)) {
fun2 <- function(z)
{
Y <- rbind(data, z)
Y <- Y[which(Y$t <= z[3]),]
Y <- stpp(Y$x, Y$y, Y$t, stwin(X$xcoord, X$ycoord, X$tcoord))
tail(cifunction(Y, theta),1)
}
}
int.fun <- function(g)
{
bin.pts <- app.pts[which((app.pts$x >= g[1]) & (app.pts$x < g[2]) & (app.pts$y >= g[3]) & (app.pts$y < g[4])) , 4]
int.bin <- mean(bin.pts)*vol
c(int.bin, mean(bin.pts), sd(bin.pts))
}
vol <- diff(X$xcoord) * diff(X$ycoord) * diff(X$tcoord) / nrow(gf$grid.full)
data <- data.frame(cbind(X$x, X$y, X$t))
names(data) <- c("x", "y", "t")
xrange <- X$xcoord
yrange <- X$ycoord
trange <- X$tcoord
n.start <- n*.1
x1 <- runif(n.start, xrange[1], xrange[2])
y1 <- runif(n.start, yrange[1], yrange[2])
t1 <- runif(n.start, trange[1], trange[2])
N <- n - n.start
miser <- function(xrange, yrange, trange, x1, y1, t1, N)
{
all.pts <- data.frame(cbind(x1, y1, t1))
names(all.pts) <- c("x", "y", "t")
all.l <- apply(all.pts, 1, fun2)
lX1 <- all.l[which((all.pts[,1] > xrange[1]) & (all.pts[,1] <= median(xrange)))]
lX2 <- all.l[which((all.pts[,1] > median(xrange)) & (all.pts[,1] < xrange[2]))]
lY1 <- all.l[which((all.pts[,2] > yrange[1]) & (all.pts[,2] <= median(yrange)))]
lY2 <- all.l[which((all.pts[,2] > median(yrange)) & (all.pts[,2] < yrange[2]))]
if((length(lX1) > 1) & (length(lX2) > 1)) {
sX1 <- sd(lX1)
sX2 <- sd(lX2)
sXsum <- sX1 + sX2
} else sXsum <- Inf
if((length(lY1) > 1) & (length(lY2) > 1)) {
sY1 <- sd(lY1)
sY2 <- sd(lY2)
sYsum <- sY1 + sY2
} else sYsum <- Inf
if((sXsum == 0) || (sYsum == 0)) {
sXsum <- Inf
sYsum <- Inf
}
S <- c(sXsum, sYsum)
all.pts <- cbind(all.pts, all.l)
names(all.pts) <- c("x", "y", "t", "l")
if(((S[1] == Inf) & (S[2] == Inf))) {
x1.1 <- runif(N, xrange[1], xrange[2])
y1.1 <- runif(N, yrange[1], yrange[2])
t1.1 <- runif(N, trange[1], trange[2])
all.pts.1 <- data.frame(cbind(x1.1, y1.1, t1.1))
names(all.pts.1) <- c("x", "y", "t")
l <- apply(all.pts.1, 1, fun2)
all.pts.1 <- cbind(all.pts.1, l)
all.pts <- rbind(all.pts, all.pts.1)
return(all.pts)
}
if (((S[1] != Inf) | (S[2] != Inf))) {
strat <- which(S==min(S))
if(length(strat) > 1)
strat <- strat[1]
if(strat == 1) {
N.a <- ceiling((sX1)/(sX1+sX2)*N)
if(N.a > 10) {
n.a <- ceiling(.1*N.a)
n.a2 <- N.a-n.a
xa <- runif(n.a, xrange[1], median(xrange))
ya <- runif(n.a, yrange[1], yrange[2])
ta <- runif(n.a, trange[1], trange[2])
xrange.a <- c(xrange[1], median(xrange))
ALL.pts <- miser(xrange.a, yrange, trange, xa, ya, ta, n.a2)
}
if((N.a <= 10) & (N.a > 0)) {
xa <- runif(N.a, xrange[1], median(xrange))
ya <- runif(N.a, yrange[1], yrange[2])
ta <- runif(N.a, trange[1], trange[2])
ALL.pts <- data.frame(cbind(xa, ya, ta))
names(ALL.pts) <- c("x", "y", "t")
l <- apply(ALL.pts, 1, fun2)
ALL.pts <- cbind(ALL.pts, l)
}
if(N.a == 0) {
ALL.pts <- data.frame()
}
N.b <- N-N.a
if(N.b > 10) {
n.b <- ceiling(.1*N.b)
n.b2 <- N.b-n.b
xb <- runif(n.b, median(xrange), xrange[2])
yb <- runif(n.b, yrange[1], yrange[2])
tb <- runif(n.b, trange[1], trange[2])
xrange.b <- c(median(xrange), xrange[2])
ALL.pts2 <- miser(xrange.b, yrange, trange, xb, yb, tb, n.b2)
}
if((N.b <= 10) & (N.b > 0)) {
xb <- runif(N.b, median(xrange), xrange[2])
yb <- runif(N.b, yrange[1], yrange[2])
tb <- runif(N.b, trange[1], trange[2])
ALL.pts2 <- data.frame(cbind(xb, yb, tb))
names(ALL.pts2) <- c("x", "y", "t")
l <- apply(ALL.pts2, 1, fun2)
ALL.pts2 <- cbind(ALL.pts2, l)
}
if(N.b == 0) {
ALL.pts2 <- data.frame()
}
total.pts <- rbind(all.pts, ALL.pts, ALL.pts2)
return(total.pts)
}
if(strat == 2){
N.a <- ceiling((sY1)/(sY1+sY2)*N)
if(N.a > 10) {
n.a <- ceiling(.1*N.a)
n.a2 <- N.a-n.a
xa <- runif(n.a, xrange[1], xrange[2])
ya <- runif(n.a, yrange[1], median(yrange))
ta <- runif(n.a, trange[1], trange[2])
yrange.a <- c(yrange[1], median(yrange))
ALL.pts <- miser(xrange, yrange.a, trange, xa, ya, ta, n.a2)
}
if((N.a <= 10) & (N.a > 0)) {
xa <- runif(N.a, xrange[1], xrange[2])
ya <- runif(N.a, yrange[1], median(yrange))
ta <- runif(N.a, trange[1], trange[2])
ALL.pts <- data.frame(cbind(xa, ya, ta))
names(ALL.pts) <- c("x", "y", "t")
l <- apply(ALL.pts, 1, fun2)
ALL.pts <- cbind(ALL.pts, l)
}
if(N.a == 0) {
ALL.pts <- data.frame()
}
N.b <- N-N.a
if(N.b > 10) {
n.b <- ceiling(.1*N.b)
n.b2 <- N.b-n.b
xb <- runif(n.b, xrange[1], xrange[2])
yb <- runif(n.b, median(yrange), yrange[2])
tb <- runif(n.b, trange[1], trange[2])
yrange.b <- c(median(yrange), yrange[2])
ALL.pts2 <- miser(xrange, yrange.b, trange, xb, yb, tb, n.b2)
}
if((N.b <= 10) & (N.b > 0)) {
xb <- runif(N.b, xrange[1], xrange[2])
yb <- runif(N.b, median(yrange), yrange[2])
tb <- runif(N.b, trange[1], trange[2])
ALL.pts2 <- data.frame(cbind(xb, yb, tb))
names(ALL.pts2) <- c("x", "y", "t")
l <- apply(ALL.pts2, 1, fun2)
ALL.pts2 <- cbind(ALL.pts2, l)
}
if(N.b == 0) {
ALL.pts2 <- data.frame()
}
total.pts <- rbind(all.pts, ALL.pts, ALL.pts2)
return(total.pts)
}
}
}
app.pts <- miser(xrange, yrange, trange, x1, y1, t1, N)
all.df <- data.frame(t(apply(gf$grid.full, 1, int.fun)))
if(n > 10000) {
sample.app.pts <- app.pts[sample(1:nrow(app.pts), 10000), ]
} else {
sample.app.pts <- app.pts
}
bins <- list(n=n, integral = all.df[,1], mean.lambda = all.df[,2], sd.lambda = all.df[,3], app.pts = sample.app.pts)
class(bins) <- "bin.info"
return(bins)
}
deviance <- devresid(X, ci1, ci2, theta1 = 3000)
names(deviance)
plot(deviance, plot.smooth=T)
x <- c()
length(x)
system("R CMD Rdconv --type=html devresid.rd --output=devresid.html")
system("R CMD Rdconv --type=html ~/devresid.rd --output=~/devresid.html")
system("R CMD Rdconv --type=html ./devresid.rd --output=./devresid.html")
setwd("~/work/stppResid R package/stppResid/man")
system("R CMD Rdconv --type=html devresid.rd --output=devresid.html")
system("R CMD Rdconv --type=html /devresid.rd --output=/devresid.html")
system("R CMD Rdconv --type=html /devresid.rd --output=devresid.html")
system("R CMD Rdconv --type=html /devresid.rd --output=./devresid.html")
system("R CMD Rdconv --type=html /devresid.rd --output=devresid2.html")
system("R CMD Rdconv --type=html /devresid.Rd --output=devresid2.html")
system("R CMD Rdconv --type=html /devresid.rd --output=devresid2.html")
system("R CMD Rdconv --type=html devresid.rd --output=devresid2.html")
system("R CMD Rdconv --type=html /devresid.rd --output=devresid2.html")
system("R CMD Rdconv --type=html /devresid.rd --output=/devresid2.html")
tools::Rd2HTML(Rd="/devresid.Rd", out="/test.html")
tools::Rd2HTML(Rd="/devresid.Rd", out="~/work/test.html")
tools::Rd2HTML(Rd="devresid.Rd", out="~/work/test.html")
tools::Rd2HTML(Rd="add.stpoints.Rd", out="~/work/test.html")
tools::Rd2HTML(Rd="devresid.Rd", out="~/work/test.html")
tools::Rd2HTML(Rd="devresid.Rd", out="~/work/test.html")
tools::Rd2HTML(Rd="devresid.Rd", out="~/work/test.html")
tools::Rd2HTML(Rd="devresid.Rd", out="~/work/test.html")
tools::Rd2HTML(Rd="gridresid.Rd", out="~/work/test.html")
tools::Rd2HTML(Rd="gridresid.Rd", out="~/work/test.html")
tools::Rd2HTML(Rd="gridresid.Rd", out="~/work/test.html")
