			Y <- stpp(Y$x, Y$y, Y$t, stwin(X$xcoord, X$ycoord, X$tcoord))#
			tail(cifunction(Y),1)#
		}#
	}#
	if(!is.null(theta)) {#
		lamb1 <- cifunction(X, theta = theta)#
		fun2 <- function(z)#
		{#
			Y <- rbind(data, z)#
			Y <- Y[which(Y$t <= z[3]),]#
			Y <- stpp(Y$x, Y$y, Y$t, stwin(X$xcoord, X$ycoord, X$tcoord))#
			tail(cifunction(Y, theta),1)#
		}#
	}#
	all <- function(tl)#
	{#
		cells <- as.points(tl$x, tl$y)#
		place <- inpip(all.p[ ,1:2], cells)#
		lamb.ave <- mean(lamb2[place])#
		lamb.sd <- sd(lamb2[place])#
		lamb.sd[which(is.na(lamb.sd))] <- lamb.ave[which(is.na(lamb.sd))]#
		n2 <- length(place)#
		return(c(lamb.ave, lamb.sd, n2))#
	}#
	vol <- areas * diff(X$tcoord)#
	e <- 0#
	n <- 0#
	lamb2 <- lamb1#
	all.p <- data#
	while(e < 1) {#
		n <- n + 10000#
		cat("total number of points used to estimate integrals: ", n, "\n")#
		xpoints <- runif(10000, X$xcoord[1], X$xcoord[2])#
		ypoints	<- runif(10000, X$ycoord[1], X$ycoord[2])#
		tpoints <- runif(10000, X$tcoord[1], X$tcoord[2])#
		new.p <- data.frame(cbind(xpoints, ypoints, tpoints))#
		names(new.p) <- c("x", "y", "t")#
		lamb.t <- apply(new.p, 1, fun2)#
		lamb2 <- c(lamb2, lamb.t)#
		all.p <- rbind(all.p, new.p)#
		info <- lapply(tl, all)#
		lamb2.ave <- unlist(lapply(info, function(w){w[1]}))#
		lamb2.sd <- unlist(lapply(info, function(w){w[2]}))#
		n3 <- unlist(lapply(info, function(w){w[3]}))#
		e <- sum(lamb2.sd/sqrt(n3) < lamb2.ave/100) #
	}#
	int.approx <- lamb2.ave * vol	#
	tess <- list(n = n, integral = int.approx, mean.lambda = lamb2.ave, sd.lambda = lamb2.sd)#
	class(tess) <- "tess.info"#
	return(tess)#
}#
#
#
tessresid <- function(X, cifunction, theta = NULL)#
{#
	if(!is.stpp(X))#
		stop("X must be an object of type stpp")#
	data <- data.frame(cbind(X$x, X$y))#
	if(nrow(unique(data)) != length(X$x)) {#
		cat("Warning message: \nOverlapping points\n")#
		Y <- unique(data)#
		x.tess <- Y[,1]#
		y.tess <- Y[,2]#
		rw <- c(X$xcoord, X$ycoord)#
		vor <- deldir(x.tess, y.tess, rw = rw, digits=20)#
		areas <- vor$summary[,8]#
		tl <- tile.list(vor)#
		tess <- tess.info(X, cifunction, theta = theta, areas, tl)#
		ints <- tess$integral#
		num <- function(tl) {#
			cells <- as.points(tl$x, tl$y)#
			place <- inpip(data, cells)#
			n2 <- length(place)#
			return(n2)#
		}#
		num.pts <- sapply(tl, num)#
		residuals <- (num.pts - ints)/sqrt(ints)#
	} else {#
		x.tess <- X$x#
		y.tess <- X$y#
		rw <- c(X$xcoord, X$ycoord)#
		vor <- deldir(x.tess, y.tess, rw = rw, digits=20)#
		areas <- vor$summary[,8]#
		tl <- tile.list(vor)#
		tess <- tess.info(X, cifunction, theta = theta, areas, tl)#
		ints <- tess$integral#
		residuals <- (1 - ints)/sqrt(ints)#
	}#
	y <- list(X = X, tile.list = tl, residuals = residuals)#
	class(y) <- "tessresid"#
	return(y)#
}#
#
#
thinresid<-function(X, cifunction = NULL, theta = NULL,  k = NULL, lambda = NULL)#
{	#
	if(!is.stpp(X))#
		stop("X must be an object of type stpp")#
	if(is.null(cifunction) && is.null(lambda))#
		stop("Either lambda or the conditional intensity function must be specified")#
	if(!is.null(lambda)) { #
		if(length(lambda) != length(X$x))#
			stop("lambda must be same length as number of points")#
		lamb1 <- lambda #
	} else { #
		if(is.null(theta)) #
			lamb1 <- cifunction(X) #
		else #
			lamb1 <- cifunction(X, theta)#
	}#
	if(is.null(k)) {#
		k <- min(lamb1)#
		cat("No cutoff rate specified, using minimum lambda_i =", k, "\n")#
	}#
	if(k <= 0)#
		stop("k must be greater than 0")#
	ml <- min(lamb1)#
	if(k > ml)#
		cat("Warning message: \nk is greater than minimum lambda_i = ", ml, ".\nThinned residuals not appropriate.\n" )#
	thin.data <- data.frame(cbind(X$x, X$y, X$t))#
	prob <- k/lamb1#
	u <- runif(length(prob))#
	retain <- (u <= prob)#
	keep <- thin.data[retain, ]#
	deleted <- thin.data[!retain, ]#
	names(keep) <- names(deleted) <- c("x", "y", "t")#
	y <- list(X = X, residuals = keep, deleted = deleted)#
	class(y) <- "thinresid"#
	return(y)#
}#
#
#
is.stpp <- function(x)#
{#
	inherits(x, "stpp")	#
}#
#
is.stwin <- function(x)#
{#
	inherits(x, "stwin")	#
}#
#
is.stgrid <- function(x)#
{#
	inherits(x, "stgrid")	#
}#
#
is.thinresid <- function(x)#
{#
	inherits(x, "thinresid")	#
}#
#
is.tessresid <- function(x)#
{#
	inherits(x, "tessresid")	#
}#
#
is.supresid <- function(x)#
{#
	inherits(x, "supresid")	#
}#
#
is.superthin <- function(x)#
{#
	inherits(x, "superthin")	#
}#
#
is.gridresid <- function(x)#
{#
	inherits(x, "gridresid")	#
}#
#
is.devresid <- function(x)#
{#
	inherits(x, "devresid")	#
}#
#
#
print.stpp <- function(x)#
{#
	cat("Space-time point process\n")#
	cat("Points:\n")#
	cat("x: ")#
	print(x$x)#
	cat("y: ")#
	print(x$y)#
	cat("t: ")#
	print(x$t)#
	cat("Space-time window:\n")#
	cat("x-range: ")#
	print(x$xcoord)#
	cat("y-range: ")#
	print(x$ycoord)#
	cat("t-range: ")#
	print(x$tcoord)#
}#
#
print.stwin <- function(x)#
{#
	cat("Space-time window\n")#
	cat("x-range: ")#
	print(x$xcoord)#
	cat("y-range: ")#
	print(x$ycoord)#
	cat("t-range: ")#
	print(x$tcoord)	#
}#
#
print.stgrid <- function(x)#
{#
	cat("Spatial grid\n")#
	print(x$grid.full)#
}#
#
print.thinresid <- function(x)#
{#
	print(x$X)#
	cat("Thinned residuals:\n")#
	print(x$T.resids)#
	cat("Deleted points:\n")	#
	print(x$deleted)#
}#
#
print.supresid <- function(x)#
{#
	print(x$X)#
	cat("Superposed residuals:\n")#
	print(x$S.resids)#
	cat("Superposed points:\n")#
	print(x$super)#
}#
#
print.superthin <- function(x)#
{#
	print(x$X)#
	cat("Super-thinned residuals:\n")#
	print(x$ST.resids)#
	cat("Superposed points:\n")#
	print(x$super)#
	cat("Automatically kept points:\n")	#
	print(x$keep1)#
	cat("Kept points after thinning:\n")#
	print(x$keep2)#
	cat("Deleted points:\n")#
	print(x$deleted)#
	}#
#
print.tessresid <- function(x)#
{#
	print(x$X)#
	cat("Tile list:\n")#
	print(x$tile.list)#
	cat("Tessellation residuals:\n")	#
	print(x$Tess.resids)#
}#
#
plot.devresid <- function(X, col.key = rev(heat.colors(100)), cutoffs = NULL, ...)#
{#
	residuals <- X$residuals#
	if(is.null(cutoffs)) {	#
		cutoff.key <- seq(min(residuals) - 1e-09, max(residuals) + 1e-09, length.out = length(col.key)+1)#
	}#
	else {#
		cutoff.key <- cutoffs#
		if((length(cutoffs) - 1) != length(col.key))#
			stop("length of cutoffs should be 1 more than length of col.key")#
	}#
	if(!is.character(col.key))#
		stop("col.key must be character vector of colors in hexadecimal")#
	gr <- X[[2]]$grid.full#
	xv <- c(unique(gr$xmin), tail(gr$xmax, 1))#
	yv <- c(unique(gr$ymin), tail(gr$ymax, 1))#
	z <- matrix(residuals, nrow = length(xv) - 1, byrow = TRUE)#
	dev.new()#
	layout(matrix(c(1,2), ncol=1), heights=c(2,.5))#
	par(mar=c(4,4,4,4), bty="n")#
	if(is.null(cutoffs)) {#
		image(xv, yv, z, xlab = "x", ylab = "y", col=col.key)#
	}#
	else { #
		image(xv, yv, z, xlab = "x", ylab = "y", col=col.key, breaks = cutoffs)#
	}#
	points(X[[1]]$x, X[[1]]$y, ...)	#
	par(mar=c(1, 1, 1.5, 1))#
	key <- (0:length(residuals))/length(residuals)#
	plot(NULL, ylim=c(-3,0), xlim=c(-0.2, 1.2), type="n", axes=F, xlab="", ylab="", main="")#
	image(key, -2:0, matrix(rep(key,2), nrow=length(residuals)+1, byrow=F), add=T, col=col.key)#
	for(i in seq(0, 1, length=10)) lines(c(i,i), c(-2,0), col=gray(0.3), lty=2)#
	text(0, -2.5, round(min(cutoff.key), 3), cex=1)#
	text(0.25, -2.5, round(quantile(cutoff.key, 0.25), 3), cex=1)#
	text(0.5, -2.5, round(median(cutoff.key), 3), cex=1)#
	text(0.75, -2.5, round(quantile(cutoff.key, 0.75), 3), cex=1)#
	text(1, -2.5, round(max(cutoff.key), 3), cex=1)#
	mtext("Deviance residuals", 3)	#
}#
#
plot.gridresid <- function(X, col.key = rev(heat.colors(100)), cutoffs = NULL, ...)#
{#
	residuals <- X$residuals#
	if(is.null(cutoffs)) {	#
		cutoff.key <- seq(min(residuals) - 1e-09, max(residuals) + 1e-09, length.out = length(col.key)+1)#
	}#
	else {#
		cutoff.key <- cutoffs#
		if((length(cutoffs) - 1) != length(col.key))#
			stop("length of cutoffs should be 1 more than length of col.key")#
	}#
	if(!is.character(col.key))#
		stop("col.key must be character vector of colors in hexadecimal")#
	gr <- X[[2]]$grid.full#
	xv <- c(unique(gr$xmin), tail(gr$xmax, 1))#
	yv <- c(unique(gr$ymin), tail(gr$ymax, 1))#
	z <- matrix(residuals, nrow = length(xv) - 1, byrow = TRUE)#
	dev.new()#
	layout(matrix(c(1,2), ncol=1), heights=c(2,.5))#
	par(mar=c(4,4,4,4), bty="n")#
	if(is.null(cutoffs)) {#
		image(xv, yv, z, xlab = "x", ylab = "y", col=col.key)#
	}#
	else { #
		image(xv, yv, z, xlab = "x", ylab = "y", col=col.key, breaks = cutoffs)#
	}#
	points(X[[1]]$x, X[[1]]$y, ...)	#
	par(mar=c(1, 1, 1.5, 1))#
	key <- (0:length(residuals))/length(residuals)#
	plot(NULL, ylim=c(-3,0), xlim=c(-0.2, 1.2), type="n", axes=F, xlab="", ylab="", main="")#
	image(key, -2:0, matrix(rep(key,2), nrow=length(residuals)+1, byrow=F), add=T, col=col.key)#
	for(i in seq(0, 1, length=10)) lines(c(i,i), c(-2,0), col=gray(0.3), lty=2)#
	text(0, -2.5, round(min(cutoff.key), 3), cex=1)#
	text(0.25, -2.5, round(quantile(cutoff.key, 0.25), 3), cex=1)#
	text(0.5, -2.5, round(median(cutoff.key), 3), cex=1)#
	text(0.75, -2.5, round(quantile(cutoff.key, 0.75), 3), cex=1)#
	text(1, -2.5, round(max(cutoff.key), 3), cex=1)#
	mtext("Grid-based residuals", 3)#
}#
#
plot.stpp <- function(X, pch = 1, asp = 1, ...)#
{#
	if(!is.stpp(X))#
		stop("X must be an object of type stpp")#
	plot(X$x, X$y, xlim = X$xcoord, ylim = X$ycoord, pch = pch, asp = asp, xlab = "x", ylab = "y", ...)#
}#
#
plot.superthin <- function(X, pch1 = 1, pch2 = 3, asp = 1, ...)#
{#
	if(!is.superthin(X))#
		stop("X must be an object of type superthin")#
	plot(X[[5]]$x, X[[5]]$y, xlim = X[[1]]$xcoord, ylim = X[[1]]$ycoord, pch = pch1, asp = asp, xlab = "x", ylab = "y", ...)#
	points(X[[6]]$x, X[[6]]$y, pch = pch1)#
	points(X[[4]]$x, X[[4]]$y, pch = pch2)	#
}#
#
plot.supresid <- function(X, pch1 = 1, pch2 = 3, asp = 1, ...)#
{#
	if(!is.supresid(X))#
		stop("X must be an object of type supresid")#
	plot(X[[1]]$x, X[[1]]$y, xlim = X[[1]]$xcoord, ylim = X[[1]]$ycoord, pch = pch1, asp = asp, xlab = "x", ylab = "y", ...)#
	points(X[[4]]$x, X[[4]]$y, pch = pch2)#
}#
#
plot.tessresid <- function(X, col.key = rev(heat.colors(100)), cutoffs = NULL, ...)#
{#
	residuals <- X$residuals#
	if(is.null(cutoffs))	{#
		cutoffs <- seq(min(residuals) - 1e-09, max(residuals) + 1e-09, length.out = length(col.key)+1)#
		cutoff.m <- data.frame(cbind(cutoffs[-length(cutoffs)], cutoffs[-1]))#
		CL.res <- rep(0, length(residuals))#
		for(j in 1:length(residuals)) {#
			CL.res[j] <- col.key[which((cutoff.m[,2] >= residuals[j]) & (cutoff.m[,1] < residuals[j]))]	#
		}#
	}#
	else {#
		if((length(cutoffs) - 1) != length(col.key))#
			stop("length of cutoffs should be 1 more than length of col.key")#
		if(!is.character(col.key))#
			stop("col.key must be character vector of colors in hexadecimal")#
		cutoff.m <- data.frame(cbind(cutoffs[-length(cutoffs)], cutoffs[-1]))#
		CL.res <- rep(0, length(residuals))#
		for(j in 1:length(residuals)) {#
			CL.res[j] <- col.key[which((cutoff.m[,2] >= residuals[j]) & (cutoff.m[,1] < residuals[j]))]	#
		}#
	}#
	dev.new()#
	layout(matrix(c(1,2), ncol=1), heights=c(2,.5))#
	par(mar=c(4,4,4,4), bty="n")#
	plot(X[[1]]$x, X[[1]]$y, type = "n", xlab = "x", ylab = "y", xlim = X[[1]]$xcoord, ylim = X[[1]]$ycoord)#
	for(i in 1:length(X[[2]])) {#
		temp <- X[[2]][i]#
		x <- temp[[1]]$x#
		y <- temp[[1]]$y#
		p <- polygon(x, y, col = CL.res[i])	#
	}#
	points(X[[1]]$x, X[[1]]$y, ...)#
	par(mar=c(1, 1, 1.5, 1))#
	key <- (0:length(CL.res))/length(CL.res)#
	plot(NULL, ylim=c(-3,0), xlim=c(-0.2, 1.2), type="n", axes=F, xlab="", ylab="", main="")#
	image(key, -2:0, matrix(rep(key,2), nrow=length(CL.res)+1, byrow=F), add=T, col=col.key)#
	for(i in seq(0, 1, length=10)) lines(c(i,i), c(-2,0), col=gray(0.3), lty=2)#
	text(0, -2.5, round(min(cutoffs), 3), cex=1)#
	text(0.25, -2.5, round(quantile(cutoffs, 0.25), 3), cex=1)#
	text(0.5, -2.5, round(median(cutoffs), 3), cex=1)#
	text(0.75, -2.5, round(quantile(cutoffs, 0.75), 3), cex=1)#
	text(1, -2.5, round(max(cutoffs), 3), cex=1)#
	mtext("Voronoi tessellation residuals", 3)#
}#
#
plot.thinresid <- function(X, pch = 1, asp = 1, ...)#
{#
	if(!is.thinresid(X))#
		stop("X must be an object of type thinresid")#
	plot(X[[3]]$x, X[[3]]$y, xlim = X[[1]]$xcoord, ylim = X[[1]]$ycoord, pch = pch, asp = asp, xlab = "x", ylab = "y", ...)#
}
plot(str)
plot(X)
plot(X, cex=ci)
plot(X, cex=ci/1000)
plot(X, cex=ci/10000)
plot(X, cex=ci/100000)
plot(X)
xrange
yrange
muf(-84.5, 10.43)
kern.est$z[5,5]
muf
xlen
ylen
muf(-84.5, 10.43)[1]
xlen*(-84.5-xrange[1])/(xrange[2]-xrange[1])
dim(kern.est$z)
image(kern.est$z)
plot(X)
kde2d.est <- kde2d(x,y,n=xlen, lims=c(xrange,yrange)) # kernel density est#
kde2d.est$z <- kde2d.est$z*n   # change to kernel function estimates#
kern.est <- kde2d.est
dim(kern.est$z)
muf(-84.5, 10.43)
xlen
ylen
ceiling(3.4)
xrange
yrange
xlen*(-84-xrange[1])/(diff(xrange))
xlen*(-84.5-xrange[1])/(xrange[2]-xrange[1])
xrange[2]-xrange[1]
diff(xrange)
xlen*(-84.5-xrange[1])/(diff(xrange))
muf <- function(x,y){#
	a <- xlen*(x-xrange[1])/(diff(xrange))#
	b <- ylen*(y-yrange[1])/(diff(yrange))#
	d <- kern.est$z[ceiling(a),ceiling(b)]#
	return(d)#
	}
muf(-84, 10.43)
muf(-84, 10.43)*diff(xrange)*diff(yrange)*t1
muf(-84, 10.43)*diff(xrange)*diff(yrange)*t1*p
muf(-84, 10.43)*diff(xrange)*diff(yrange)*t1*theta1[3]
theta1[3]
theta1
ci <- cif(X, theta1)
hist(ci)
max(ci)
min(ci)
boxplot(ci)
str <- superthin(X, cif, theta=theta1, k=4000)
plot(str)
4000*diff(xrange)*diff(yrange)*t1
788/(diff(xrange)*diff(yrange)*t1)
str <- superthin(X, cif, theta=theta1, k=7738)
plot(str)
b1 <- optim(theta1, f, hessian=T, control = list(maxit=600))
xrange
yrange
muf(-84, 10.43)
hist(kern.est$z)
boxplot(kern.est$z)
?kde2d
?kernel2d
?Kernel2d
library(splancs)
?kernel2d
test <- spkernel2d(cbind(X$x,X$y))
testpts <- as.points(X$x, X$y)
plot(testpts)
testpts$poly
polygon
?polygon
?poly
?bbox
test <- kernel2d(test, bbox(test))
test <- kernel2d(testpts, bbox(testpts))
test <- kernel2d(testpts, bbox(testpts), h0=1, nx=400, ny=400)
image(test)
dim(test)
test
test <- kernel2d(testpts, bbox(testpts), h0=.01, nx=400, ny=400)
test
test <- kernel2d(testpts, bbox(testpts), h0=.001, nx=400, ny=400)
test
test <- kernel2d(testpts, bbox(testpts), h0=.0001, nx=400, ny=400)
test
test <- kernel2d(testpts, bbox(testpts), h0=10, nx=400, ny=400)
test
140*9
500+90+90+276
1260-956
140/31
140/31*7
304-35
?integrate
1129/1638
432/505
733/872
?data
data(redbanana.meters)
data(redbanana)
data("redbanana.meters")
data(sim)
data(sim)
?data
data()
library(SSsimple)
?SSsimple
data"sim"
data("sim")
factorial(0)
log(1)
(1*log(2)+2*log(1)+1*log(1)+2*log(2))-(2+2+1+1)-(log(1)+log(1)+log(2)+log(2))
(2*log(2)+1*log(1)+1*log(1)+2*log(2))-(2+2+1+1)-(log(1)+log(1)+log(2)+log(2))
log(.5)
log(.4)
log(.3)
log(.2)
log(.1)
(7*log(4)+1*log(1)+1*log(4)+1*log(1))-(4+4+1+1)-(log(7)+log(1)+log(1)+log(1))
(4*log(4)+1*log(1)+1*log(1)+4*log(4))-(4+4+1+1)-(log(4)+log(4)+log(1)+log(1))
ls()
